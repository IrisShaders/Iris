//file:noinspection GroovyAssignabilityCheck

buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:1.135'
	}
}
plugins {
	id 'fabric-loom' version '0.7-SNAPSHOT'
	id 'maven-publish'
	id 'org.ajoberstar.grgit' version '4.1.0'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '1.1.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${getVersionMetadata()}"
group = project.maven_group


minecraft {
	accessWidener = file("src/main/resources/iris.accesswidener")
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Needed for loading our custom language files
	includeFabricApiModule "fabric-resource-loader-v0"

	// Needed for adding some key binds (reload, toggle, open shaders GUI)
	includeFabricApiModule "fabric-key-binding-api-v1"

	// JUnit 5 Jupiter test engine
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'

	// Preprocessing library used on shaders
	modImplementation "org.anarres:jcpp:1.4.14"
	include "org.anarres:jcpp:1.4.14"
	include 'org.slf4j:slf4j-api:1.7.12'
}

if (project.sodium_compatibility == "true") {
	repositories {
		maven {
			name = "Modrinth"
			url = "https://api.modrinth.com/maven"
			content {
				includeGroup "maven.modrinth"
			}
		}
	}

	dependencies {
		modImplementation "maven.modrinth:sodium:" + project.sodium_version
	}
}

test {
	// Use JUnit 5 Platform for tests
	useJUnitPlatform()
}

def includeFabricApiModule(String moduleName) {
	Object dependency = fabricApi.module(moduleName, project.fabric_version);

	dependencies.modImplementation(dependency);
	dependencies.include(dependency);
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version

		if (project.sodium_compatibility != "true") {
			filter {
				String line -> return line.replace("mixins.iris.compat.sodium.json", "empty.json")
			}
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release.set(targetVersion)
	}

	// Enable this if you want to see deprecation warnings
	// A lot of these aren't well-avoidable on 1.16
	// it.options.deprecation = true
}

sourceSets {
	// "header" API stubs for implementing APIs from other mods
	// These are not compiled into the resulting JAR file or loaded at runtime,
	// they are for compilation purposes only.
	//
	// Proper implementations of these classes *might* be available at runtime,
	// but that is not guaranteed. Generally, we must detect whether they are
	// available through mod loading checks (or if a corresponding entrypoint is
	// called by Fabric Loader / Quilt Loader / etc).
	headers {
		java {
			compileClasspath += main.compileClasspath
		}
	}

	// "vendored" libraries copied and repackaged into the Iris source tree
	// These are compiled into the resulting JAR file and are available
	// at runtime.
	vendored {
		java {
			compileClasspath += main.compileClasspath
		}
	}

	if (project.sodium_compatibility == "true") {
		// A source set for the code needed to implement sodium compatibility.
		sodiumCompatibility {
			java {
				compileClasspath += main.compileClasspath
				compileClasspath += main.output
				compileClasspath += vendored.output
			}
		}
	}

	// The main source code of Iris.
	main {
		java {
			// headers / API stubs are only available at compilation time.
			compileClasspath += headers.output

			// Vendored sources are available at compilation time and runtime.
			compileClasspath += vendored.output
			runtimeClasspath += vendored.output

			if (project.sodium_compatibility == "true") {
				runtimeClasspath += sourceSets.sodiumCompatibility.output
			}
		}
	}

	test {
		java {
			// headers / API stubs are only available at compilation time.
			compileClasspath += headers.output

			// Vendored sources are available at compilation time and runtime.
			compileClasspath += vendored.output
			runtimeClasspath += vendored.output
		}
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	// NB: headers / API stubs are not included in the resulting JAR file.
	// We don't have a "from sourceSets.headers.output" here as a result.

	// Vendored sources are included in the resulting JAR file.
	from sourceSets.vendored.output

	if (project.sodium_compatibility == "true") {
		from (sourceSets.sodiumCompatibility.output) {
			it.filesMatching("*refmap.json") {
				FileCopyDetails details -> {
					details.name("iris-sodium-compat-refmap.json")
				}
			}
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	}
}

runClient {
	jvmArgs "-Dmixin.debug.export=true"
}

@SuppressWarnings('GrMethodMayBeStatic')
def getVersionMetadata() {
	def build_id = System.getenv("GITHUB_RUN_NUMBER")

	// CI builds only
	if (build_id != null) {
		return "build.${build_id}"
	}

	if (grgit != null) {
		def head = grgit.head()
		def id = head.abbreviatedId

		// Flag the build if the build tree is not clean
		if (!grgit.status().clean) {
			id += "-dirty"
		}

		return "rev.${id}"
	}
}

def ENV = System.getenv()

def getBranch() {
	def ENV = System.getenv()
	if (ENV.GITHUB_REF) {
		def branch = ENV.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit != null) {
		def head = grgit.head()
		def id = head.abbreviatedId

		// Flag the build if the build tree is not clean
		if (!grgit.status().clean) {
			id += "-dirty"
		}
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}


curseforge {
	if (ENV.CURSEFORGE_TOKEN) {
		apiKey = ENV.CURSEFORGE_TOKEN
	}

	project {
		id = '470001'
		changelog = "https://github.com/IrisShaders/Iris/tree/trunk/docs/changelogs/${project.mod_version}summary.md"
		releaseType = 'release'
		relations {
			requiredDependency 'sodium'
		}
		addGameVersion "$project.minecraft_version"
		addGameVersion 'Fabric'

		mainArtifact(remapJar) {
			displayName = "Iris $project.mod_version for Minecraft $project.minecraft_version"
		}
		afterEvaluate {
			uploadTask.dependsOn(remapJar)
		}
	}
	options {
		forgeGradleIntegration = false
	}
}

import com.modrinth.minotaur.TaskModrinthUpload

task modrinth(type: TaskModrinthUpload, dependsOn: remapJar) {
	onlyIf {
		ENV.MODRINTH_TOKEN
	}

	token = ENV.MODRINTH_TOKEN
	projectId = "5XACEUIs"
	versionNumber = "mc$project.mod_version"
	versionName = "Iris $project.mod_version for Minecraft $project.minecraft_version"
	releaseType = 'release'
	changelog = "https://github.com/IrisShaders/Iris/tree/trunk/docs/changelogs/${project.mod_version}summary.md"

	uploadFile = remapJar

	addGameVersion(project.minecraft_version)
	addLoader('fabric')
}


import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github(dependsOn: remapJar) {
	onlyIf {
		ENV.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("Iris $project.mod_version for Minecraft $project.minecraft_version")
		releaseBuilder.body("https://github.com/IrisShaders/Iris/tree/trunk/docs/changelogs/${project.mod_version}summary.md")
		releaseBuilder.commitish(getBranch())
		releaseBuilder.prerelease(false)

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.mod_version}+build.${ENV.GITHUB_RUN_NUMBER}.jar"), "application/java-archive");
	}
}
